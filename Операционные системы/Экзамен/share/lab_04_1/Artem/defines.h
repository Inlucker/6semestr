#pragma once

#include <linux/sched.h>

static const char *stat_info[] = {
    "pid",         // Идентификатор процесса
    "comm",         // Имя файла в круглых скобках
    "state",        // Состояние процесса. Одно из следующих:
    /*
                    R  Running
                    S  Sleeping in an interruptible wait
                    D  Waiting in uninterruptible disk sleep
                    Z  Zombie
                    T  Stopped (on a signal) or (before Linux 2.6.33)
                        trace stopped
                    t  Tracing stop (Linux 2.6.33 onward)
                    W  Paging (only before Linux 2.6.0)
                    X  Dead (from Linux 2.6.0 onward)
                    x  Dead (Linux 2.6.33 to 3.13 only)
                    K  Wakekill (Linux 2.6.33 to 3.13 only)
                    W  Waking (Linux 2.6.33 to 3.13 only)
                    P  Parked (Linux 3.9 to 3.13 only) 
    */
    "ppid",         // Идентификатор процесса-предка
    "pgrp",         // Идентификатор группы процесса
    "session",      // Идентификатор сессии процесса
    "tty_nr",       // Номер терминала (Major: 15-8 Minor:31-20 V 7-0)
    "tpgid",        // Идентификатор группы процесса, который в настоящий момент владеет терминалом tty_nr, к которому подключен данный процесс
    "flags",        // * Флаги процесса (16 бит)
    "minflt",       // * Количество незначительных сбоев, которые возникли при работе процесса, и которые не требуют загрузки страницы памяти с диска.
    "cminflt",      // Количество незначительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.
    "majflt",       // Количество значительных сбоев, которые возникли при работе процесса, и которые потребовали загрузки страницы памяти с диска.
    "cmajflt",      // Количество значительных сбоев, которые возникли при ожидании окончания работы процессов-потомков.
    "utime",        // Время (выраженное в тиках), в течение которого процесс выполнялся в режиме пользователя.
    "stime",        // Время (выраженное в тиках), в течение которого процесс выполнялся в режиме ядра.
    "cutime",       // Время (выраженное в тиках), в течение которого процесс, ожидающий завершения процессов-потомков, выполнянялся в режиме пользователя.
    "cstime",       // Время (выраженное в тиках), в течение которого процесс, ожидающий завершения процессов-потомков, выполнянялся в режиме ядра.
    "priority",     // * Для процессов реального времени это отрицательный приоритет планирования минус один,
                    // то есть число в диапазоне от -2 до -100, соответствующее приоритетам в реальном времени от 1 до 99.
                    // Для остальных процессов это необработанное значение nice, представленное в ядре.
                    // Ядро хранит значения nice в виде чисел в диапазоне от 0 (высокий) до 39 (низкий),
                    // соответствующих видимому пользователю диапазону от -20 до 19.
    "nice",         // Значение для nice в диапазоне от 19 (наиболее низкий приоритет) до -20 (наивысший приоритет)
    "num_threads",  // Количество потоков в данном процесса. До 2.6 установлено в 0
    "itrealvalue",  // * Количество мигов до того, как следующий SIGALARM будет послан процессу интервальным таймером. После 2.6.17 установлено в 0
    "starttime",    // Время (выраженное в тиках), прошедшее после запуска системы до запуска процесса
    "vsize",        // * Размер виртуальной памяти в байтах.
    "rss",          // Resident Set Size: Количество страниц процесса в физической памяти.
                    // Это только те страницы, которые учитываются как текст, данные или пространство стека. 
                    // Это не включает страницы, которые не были загружены по требованию или которые были заменены.
    "rsslim",       // Текущий лимит в байтах на резидентный размер процесса.
    "startcode",    // Адрес, выше которого может выполняться код программы.
    "endcode",      // Адрес, ниже которого может выполняться код программ.
    "startstack",   // Адрес начала (т.е. дна) стека.
    "kstkesp",      // Текующее значение ESP.
    "kstkeip",      // Текующее значение EIP.
    "signal",       // Битовая карта ожидающих сигналов (устарела, т.к. не предоставляет информацию о сигналах реального времени [см. /proc/[pid]/status])
                    // [см. функцию sigqueue].
    "blocked",      // Битовая карта заблокированных сигналов [см. функции семейства sigaction/sigprocmask].
    "sigignore",    // Битовая карта игнорируемых сигналов [см. функции семейства sigset/sigignore].
    "sigcatch",     // * Битовая карта перехватываемых сигналов.
    "wchan",        // * "Канал", в котором ожидает процесс. Это адрес места в ядре, где процесс находится в спящем режиме.
                    // Соответствующее символьное имя можно найти в /proc/[pid]/wchan.
    "nswap",        // * Количество страниц на своппинге (не поддерживается).
    "cnswap",       // * Суммарное nswap для процессов-потомков.
    "exit_signal",  // Сигнал, который будет послан предку, когда процесс завершится.
    "processor",    // * Номер процессора, на котором последний раз выполнялся процесс.
    "rt_priority",  // Приоритет планирования реального времени, число в диапазоне от 1 до 99 для процессов реального времени, 0 для остальных. 
    "policy",       // * Политика планирования (см. #include <linux/sched.h>).
    "delayacct_blkio_ticks",    // * Суммарные задержки ввода/вывода в тиках.
    "guest_time",   // * Гостевое время (выраженное в тиках) процесса (время,
                    // потраченное на выполнение виртуального процессора на гостевой операционной системе) в тиках.
    "cguest_time",  // * Гостевое время (выраженное в тиках) для потомков процесса в тика.
    "start_data",   // * Адрес, выше которого размещаются инициализированные и неинициализированные (BSS) данные программы.
    "end_data",     // * Aдрес, ниже которого размещаются инициализированные и неинициализированные (BSS) данные программы
    "start_brk",    // * Адрес, выше которого куча программы может быть расширена с использованием brk()
    "arg_start",    // Адрес, выше которого размещаются аргументы командной строки.
    "arg_end",      // Адрес, ниже которого размещаются аргументы командной строки.
    "env_start",    // Адрес, выше которого размещается окружение программы.
    "end_end",      // Адрес, ниже которого размещается окружение программы.
    "exit_code",    // Статус завершения потока в форме, возвращаемой waitpid().
    NULL 
};

char *statm_info[] = {
    "size",         // Общий размер программы
    "resident",     // * Размер резидентной части программы
    "shared",       // * Количество резидентных общих страниц 
    "text",         // Количество страниц текста программы
    "lib",          // * library (???). С 2.6 уставновлено в 0
    "data",         // Количество страницы данных и стека
    "dt",           // Количество "Грязных" (модифицированных) страниц. С 2.6 уставновлено в 0
    NULL
};

char *io_info[] = {
    "rchar",        // Количество байтов, которые эта задача вызвала для чтения из хранилища [см. read/pread].
    "wchar",        // Количество байтов, которые эта задача вызвала или должна вызвать для записи на диск [см. write/pwrite].
    "syscr",        // Количество системных вызовов, связанных с чтением.
    "syscw",        // Количество системных вызовов, связанных с записью.
    "read_bytes",   // Количество байтов, которое действительно было извлечено этим процессом из хранилища.
    "write_bytes",  // Количество байтов, которое действительно было записано этим процессом в хранилище.
    "cancelled_write_bytes",    // Количество байтов, которые были записаны процессом в файл, который в последствии был удален этим процессом
                                // Можно увидеть ненулевое значение для процессов, создающих временные файлы
    NULL
};

/** Примечания
 * jiffies - Количество импульсов таймера, которые были получены со времени загрузки системы
 */

// Status info
